{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udcd3 Welcome \u26a0\ufe0f Work in Progress This is a very early stage, work-in-progress collection of documents that we use to coordinate at https://ritza.co. If you want to work with Ritza, check out: Writing for Ritza Our job opening for a Backend Freelance writer Our style guide","title":"\ud83d\udcd3 Welcome"},{"location":"#welcome","text":"","title":"\ud83d\udcd3 Welcome"},{"location":"#work-in-progress","text":"This is a very early stage, work-in-progress collection of documents that we use to coordinate at https://ritza.co. If you want to work with Ritza, check out: Writing for Ritza Our job opening for a Backend Freelance writer Our style guide","title":"\u26a0\ufe0f  Work in Progress"},{"location":"admin/invoicing-guidelines/","text":"Invoicing guidelines Your invoice needs to follow some standard requirements, including: the invoice date, a description of services provided, a sequential invoice number, your contact details, and our contact details. It should also contain your international bank details (see note about countries we can pay to below). Contact details Please make the invoice out to Ritza Kwikstaartlaan 42 Unit E1992 3704GS Zeist The Netherlands and email it in PDF format to invoices@ritza.co Payment We pay via EFT (South Africa), ACH (United States), or SEPA (IBAN) transfers (most of Europe). We cannot pay via PayPal, Crypocurrency, or any other custom provider. You will not be charged transfer fees and will receive the full agreed amount. If you are in South Africa and have not received money from abroad recently, you will need to fill out a short online form which will be emailed to you after the payment is made. Dates We process invoices on the last working day of every calendar month. Please allow 3-5 days for the balance to reflect in your account. We use Wise (formerly TransferWise) for all payments, so the payment will reflect instantly if you use them for incoming payments.","title":"Invoicing guidelines"},{"location":"admin/invoicing-guidelines/#invoicing-guidelines","text":"Your invoice needs to follow some standard requirements, including: the invoice date, a description of services provided, a sequential invoice number, your contact details, and our contact details. It should also contain your international bank details (see note about countries we can pay to below).","title":"Invoicing guidelines"},{"location":"admin/invoicing-guidelines/#contact-details","text":"Please make the invoice out to Ritza Kwikstaartlaan 42 Unit E1992 3704GS Zeist The Netherlands and email it in PDF format to invoices@ritza.co","title":"Contact details"},{"location":"admin/invoicing-guidelines/#payment","text":"We pay via EFT (South Africa), ACH (United States), or SEPA (IBAN) transfers (most of Europe). We cannot pay via PayPal, Crypocurrency, or any other custom provider. You will not be charged transfer fees and will receive the full agreed amount. If you are in South Africa and have not received money from abroad recently, you will need to fill out a short online form which will be emailed to you after the payment is made.","title":"Payment"},{"location":"admin/invoicing-guidelines/#dates","text":"We process invoices on the last working day of every calendar month. Please allow 3-5 days for the balance to reflect in your account. We use Wise (formerly TransferWise) for all payments, so the payment will reflect instantly if you use them for incoming payments.","title":"Dates"},{"location":"how-we-work/choosing-a-topic/","text":"Choosing an article topic Cliched topics that we avoid There are some projects that are used so often in tutorials and example projects that they have become cliched. We avoid these (this is a non-exhaustive list). Micro blog site or Twitter clone A twitter clone or other simple microblogging site where people can post messages To do list or Trello clone A todo list or Kanban board Temperature / other conversion tools a way to convert celsius to fahrenheit or similar conversions (inches to cm, etc) Making 'evergreen' articles Nothing lasts forever, but we should attempt to ensure that our projects are long-lived. Therefore those based around time-specific events (e.g. COVID-19, a specific sports match, etc) should be avoided Using free software Ideally, we only demo free and open source software. We should avoid things like the Twitter API, the Google Maps widget, and Firebase as these are known for changing (both in functionality and pricing) and breaking example projects. We should also avoid relying on software or APIs that have not been around for at least 5 years. These are guidelines - in some cases, it is necessary or preferable to use proprietary software or APIs. In these cases, we should ensure that our demo works on a free tier or similar.","title":"Choosing an article topic"},{"location":"how-we-work/choosing-a-topic/#choosing-an-article-topic","text":"","title":"Choosing an article topic"},{"location":"how-we-work/choosing-a-topic/#cliched-topics-that-we-avoid","text":"There are some projects that are used so often in tutorials and example projects that they have become cliched. We avoid these (this is a non-exhaustive list).","title":"Cliched topics that we avoid"},{"location":"how-we-work/choosing-a-topic/#micro-blog-site-or-twitter-clone","text":"A twitter clone or other simple microblogging site where people can post messages","title":"Micro blog site or Twitter clone"},{"location":"how-we-work/choosing-a-topic/#to-do-list-or-trello-clone","text":"A todo list or Kanban board","title":"To do list or Trello clone"},{"location":"how-we-work/choosing-a-topic/#temperature-other-conversion-tools","text":"a way to convert celsius to fahrenheit or similar conversions (inches to cm, etc)","title":"Temperature / other conversion tools"},{"location":"how-we-work/choosing-a-topic/#making-evergreen-articles","text":"Nothing lasts forever, but we should attempt to ensure that our projects are long-lived. Therefore those based around time-specific events (e.g. COVID-19, a specific sports match, etc) should be avoided","title":"Making 'evergreen' articles"},{"location":"how-we-work/choosing-a-topic/#using-free-software","text":"Ideally, we only demo free and open source software. We should avoid things like the Twitter API, the Google Maps widget, and Firebase as these are known for changing (both in functionality and pricing) and breaking example projects. We should also avoid relying on software or APIs that have not been around for at least 5 years. These are guidelines - in some cases, it is necessary or preferable to use proprietary software or APIs. In these cases, we should ensure that our demo works on a free tier or similar.","title":"Using free software"},{"location":"how-we-work/communication-guidelines/","text":"Don't say hello in chat Also see NoHello.com . Async communication is in many ways the reverse of sync communication, and this is true for niceties as well. While it's important to be cordial and friendly, you can often invert normal social conventions and put information up front and chit-chat afterwards instead of the other way round. When a conversation takes place over hours or days, then: Hi John, could you share that widget we discussed last week with me (hi, by the way - how are things) ... wait Hi Mary, here it is (going great - how's there? Looking forward to the weekend tomorrow) is much more efficient and respectful of each other's time than Hi John, ... wait Hi Mary, how are you? ... wait Good thanks. How's there? ... wait Default to including too many people than too few To avoid three way conversations, always include anyone who might be relevant from the start. People in async environments are bottlenecked by responding to emails, slack threads, etc not by reading them so no need to 'save people's inboxes'. Make it clear when you are owning a decision or expecting someone else to to own it 'Shared' responsibility is inefficient and often people have strong opinions over small things. Be prepared to own certain decisions, deliverables, or conversations and don't spend excess effort getting to consensus (bias for action).","title":"Communication guidelines"},{"location":"how-we-work/communication-guidelines/#dont-say-hello-in-chat","text":"Also see NoHello.com . Async communication is in many ways the reverse of sync communication, and this is true for niceties as well. While it's important to be cordial and friendly, you can often invert normal social conventions and put information up front and chit-chat afterwards instead of the other way round. When a conversation takes place over hours or days, then: Hi John, could you share that widget we discussed last week with me (hi, by the way - how are things) ... wait Hi Mary, here it is (going great - how's there? Looking forward to the weekend tomorrow) is much more efficient and respectful of each other's time than Hi John, ... wait Hi Mary, how are you? ... wait Good thanks. How's there? ... wait","title":"Don't say hello in chat"},{"location":"how-we-work/communication-guidelines/#default-to-including-too-many-people-than-too-few","text":"To avoid three way conversations, always include anyone who might be relevant from the start. People in async environments are bottlenecked by responding to emails, slack threads, etc not by reading them so no need to 'save people's inboxes'.","title":"Default to including too many people than too few"},{"location":"how-we-work/communication-guidelines/#make-it-clear-when-you-are-owning-a-decision-or-expecting-someone-else-to-to-own-it","text":"'Shared' responsibility is inefficient and often people have strong opinions over small things. Be prepared to own certain decisions, deliverables, or conversations and don't spend excess effort getting to consensus (bias for action).","title":"Make it clear when you are owning a decision or expecting someone else to to own it"},{"location":"how-we-work/one-on-ones/","text":"One on ones at Ritza Most people have a 1:1 with me (Gareth) of at least 30 minutes every week. While we may discuss what you're working on etc during this time, the focus is on any way I can help you -- not just with your work at Ritza, but in general. You're welcome to come prepared with a list of things you'd like to discuss - this could be anything you want, e.g. your career development, going over your code or writing in depth, asking about Ritza's history and goals, or anything else. This is your time and you're encouraged to use it in a way that is valuable for you.","title":"One on ones at Ritza"},{"location":"how-we-work/one-on-ones/#one-on-ones-at-ritza","text":"Most people have a 1:1 with me (Gareth) of at least 30 minutes every week. While we may discuss what you're working on etc during this time, the focus is on any way I can help you -- not just with your work at Ritza, but in general. You're welcome to come prepared with a list of things you'd like to discuss - this could be anything you want, e.g. your career development, going over your code or writing in depth, asking about Ritza's history and goals, or anything else. This is your time and you're encouraged to use it in a way that is valuable for you.","title":"One on ones at Ritza"},{"location":"how-we-work/principles/","text":"We are crafters, not overseers Many companies in publishing and content production are filled with overseers - account managers, project managers, team leads, analysts, 'growth hackers' etc. There are often more people overseeing than doing . We are a team of doers: people who create and take pride in what we have created. We work mainly asynchronously, following companies like Basecamp. We don't 'jump on quick calls' or waste time on Scrum 'ceremonies'. We prefer to tread on a few toes than to hesitate and delay for sign-offs. We have a strong bias for action We do what needs to be done and make decisions wherever possible instead of waiting for approval, sign-off, or full consensus. We do things within days or weeks, not months or years. We prefer to do a project and then talk about whether it was a good fit than to spend 80% of the time defining a services agreement and then 20% of time executing on it. This is linked to Python's \" It's easier to ask for forgiveness than permission \" and \" lazy consensus \" from Apache. Our quality bar gets higher over time As we gain trust from various customers, we make ever increasing effort to not abuse this trust. When a customer is not reading every single word (or even every article) that we produce, we need to do more quality control ourselves, not less. Everything we produce is free to the world We don't take on projects to create e.g. internal syllabus content, internal corporate training, paid courses, or non-free books. Everything we do should be available for free, ideally under a permissive license and in several formats (e.g. HTML, Markdown, ePub, PDF). We create value, we don't extract it It's pretty easy to land large contracts, pass these on to cheaper freelancers and pocket the difference. This is extracting value and we don't do this. Instead, we work with team members regularly in a sustainable and mutually beneficial way. We provide a team, and opioninated way of working, and substantive learning experiences to writers, while also resulting in quality and quantity that could not be produced by any individual. The customer, the writer, and the consumer should all mutually benefit from every article we work on. We actively remember that people are human We believe that autonomy and freedom are basic human rights and needs. Many employer-employee relationships are far too close to slavery. We don't do restraint of trades, we don't force people to work at specific times, or in specific locations. We don't tell people what to wear. We don't do performance reviews. We don't try to extract value from our employees or contractors. We don't treat people like robots, slaves, or young children. Obviously there are some tradeoffs, and we have agreements in place to ensure that Ritza survives such as notice periods and leave agreements, but these are done from a place of mutual respect, and not from a position of power to someone who needs to comply. We value potential over fungibility At many larger corporations, it is preferable for employees to constantly 'perform' at a predictable 20% of their potential rather than allowinng some people to (unpredictably) reach 80-100% some of the time. It is a priority that if any individual leaves that they can easily be replaced. While we make hard commitments and keep to these, this predictability and stability is not achieved at the cost of limiting upside potential through excessive process or safety rails.","title":"Principles"},{"location":"how-we-work/principles/#we-are-crafters-not-overseers","text":"Many companies in publishing and content production are filled with overseers - account managers, project managers, team leads, analysts, 'growth hackers' etc. There are often more people overseeing than doing . We are a team of doers: people who create and take pride in what we have created. We work mainly asynchronously, following companies like Basecamp. We don't 'jump on quick calls' or waste time on Scrum 'ceremonies'. We prefer to tread on a few toes than to hesitate and delay for sign-offs.","title":"We are crafters, not overseers"},{"location":"how-we-work/principles/#we-have-a-strong-bias-for-action","text":"We do what needs to be done and make decisions wherever possible instead of waiting for approval, sign-off, or full consensus. We do things within days or weeks, not months or years. We prefer to do a project and then talk about whether it was a good fit than to spend 80% of the time defining a services agreement and then 20% of time executing on it. This is linked to Python's \" It's easier to ask for forgiveness than permission \" and \" lazy consensus \" from Apache.","title":"We have a strong bias for action"},{"location":"how-we-work/principles/#our-quality-bar-gets-higher-over-time","text":"As we gain trust from various customers, we make ever increasing effort to not abuse this trust. When a customer is not reading every single word (or even every article) that we produce, we need to do more quality control ourselves, not less.","title":"Our quality bar gets higher over time"},{"location":"how-we-work/principles/#everything-we-produce-is-free-to-the-world","text":"We don't take on projects to create e.g. internal syllabus content, internal corporate training, paid courses, or non-free books. Everything we do should be available for free, ideally under a permissive license and in several formats (e.g. HTML, Markdown, ePub, PDF).","title":"Everything we produce is free to the world"},{"location":"how-we-work/principles/#we-create-value-we-dont-extract-it","text":"It's pretty easy to land large contracts, pass these on to cheaper freelancers and pocket the difference. This is extracting value and we don't do this. Instead, we work with team members regularly in a sustainable and mutually beneficial way. We provide a team, and opioninated way of working, and substantive learning experiences to writers, while also resulting in quality and quantity that could not be produced by any individual. The customer, the writer, and the consumer should all mutually benefit from every article we work on.","title":"We create value, we don't extract it"},{"location":"how-we-work/principles/#we-actively-remember-that-people-are-human","text":"We believe that autonomy and freedom are basic human rights and needs. Many employer-employee relationships are far too close to slavery. We don't do restraint of trades, we don't force people to work at specific times, or in specific locations. We don't tell people what to wear. We don't do performance reviews. We don't try to extract value from our employees or contractors. We don't treat people like robots, slaves, or young children. Obviously there are some tradeoffs, and we have agreements in place to ensure that Ritza survives such as notice periods and leave agreements, but these are done from a place of mutual respect, and not from a position of power to someone who needs to comply.","title":"We actively remember that people are human"},{"location":"how-we-work/principles/#we-value-potential-over-fungibility","text":"At many larger corporations, it is preferable for employees to constantly 'perform' at a predictable 20% of their potential rather than allowinng some people to (unpredictably) reach 80-100% some of the time. It is a priority that if any individual leaves that they can easily be replaced. While we make hard commitments and keep to these, this predictability and stability is not achieved at the cost of limiting upside potential through excessive process or safety rails.","title":"We value potential over fungibility"},{"location":"how-we-work/standups/","text":"We do \"standups\" asynchronously on Slack, preferably daily. Standups are to Keep everyone in sync - people are curious about what their teammates are working on and can often help out or provide some insight relating to a point. Avoid being blocked on the same thing for too long - if your daily update is the same for a while, it's a good indiciation that you need to break something down more or get help Avoid things being forgotten - while we use Trello and other tools to help keep track of the bigger picture, standups provide a good summary of where things are and what is \"work-in-progress\" at any moment Standups are not there to monitor you or make sure you are doing \"enough\", so don't feel pressured by them. Standups are optional but encouraged. I use mine as my own to-do list for the day and check back on it during the day and often the day after (while I am writing the next one) as a way of keeping track and adjusting/correcting my own time estimates. -- Why \"standups\"? In colocated dev teams it's common to do this at the same each morning. The entire team stands up (which is intended to help ensure that no one talks for too long) and gives a short update on what they're working on and anything they need help with). In distributed, async teams the terminology doesn't make as much sense, but sitting is unhealthy so if you have a standing desk or similar feel free to use the name as a reminder to stand up for a while :)","title":"Standups"},{"location":"how-we-work/writing-for-ritza/","text":"Writing for Ritza If you're part of the small group of people who likes writing and coding, we might be a good fit. Ritza produces very technical articles, blog posts, documentation, and ebooks, usually including code samples. In many cases, our writers build proof-of-concept projects and write about how they did it, so they are proficient at programming (often generalists so that they can e.g. build a small web application, including the front-end, back-end, and database) and love writing (while we have expert editors on board, our writers are also good at things like sentence structure, grammar, and explaining complicated concepts using simple language). We produce articles across a wide range of subject areas, but some focus areas include: Software Engineering - e.g. building web applications, games, tools, etc DevOps - e.g. deploying applications to production environments or using specific platforms Machine Learning and MLOps - e.g. training basic models or setting up production ML architectures Some examples of our work include: Code With Repl.it : A set of tutorials and ebook for learning to code while using Repl.it Code Capsules : an example of a project we did for a PaaS provider. What you need to be considered We work with writers from different backrounds and we do not look for formal qualifications (though in many cases an understanding of computer science fundamentals typically associated with a university degree is important). Many of our writers need Experience with coding, preferably in a production setting Experience with writing, preferably educational style non-fiction writing (e.g. a technical blog) But these are not hard requirements, so if you have a strong interest in both we can show you the ropes. How we work with writers We are not a freelance marketplace, so nearly all of our writers work with us regularly, not on one-off projects. We think that writing 40h/week is a sure way to get burned out and we value the industry experience that our writers have too. A majority of our writers work with us on retainer agreements for a fixed number of hours per week. This is not in addition to a full time job - we don't believe that anyone should work for more than 40h/week, so most of our writers are part time or freelance engineers, or they have other priorities in life like spending more time with their families and therefore a part time arrangement works out well for them. Our preferred method of hiring is We look at your application (possibly including CV, writing samples, code portfolio, motivation letter though none are compulsory) If we like it, we arrange a short, informal call to get to know you a bit better If we like each other after that, we contract you to do a trial article (around 2000 words) If we like each other after that, we agree to a monthly retainer (you work 10-30 hours/month for us for a fixed monthly fee) How our writing process works Our writers often propose article topics themselves. Sometimes we have specific topics to meet the needs of our customers, or we brainstorm interesting topics as a team. Once a topic is finalised, the writer starts a draft. This often involves writing some example code, and then writing an article including that code. The article goes through some rounds of editing, usually a technical feedback round where higher level feedback is given and then a language feedback round focusing on clarity and match with our style guide . Once an article is ready, we push it to relevant places - usually our customer's own website and possibly also channels like Medium, HashNode, and Dev.to. We focus on quality over speed (we try to avoid 'rush work' or very short deadlines), but at the same time we work with a high velocity . Articles do not sit around between rounds of editing waiting for feedback from different people. The technical and language editing rounds should take no more than 2 days in most cases. Frequency and quantity of posts This depends a lot on complexity - a 2000 word post can take 2 days or 2 weeks, depending on things like research needed and technical complexity. We always mutually agree deadlines with our writers: usually they propose one that seems manageable to them first, instead of the assigning them arbitrarily. The number of posts a writer can do also depends on their hourly agreement with us. Some examples: A writer on a 15h/week contract with us produces, on average, a proof-of-concept application and draft of 2000 words per week (perhaps 5-7 hours on each the code and writing, with some time for collaboration, editing, updating existing content, etc) A writer on a 4h/week contract with us produces one very in-depth article (5000+ words with extensive code samples) after 4 weeks. A writer on a 30h/week contract with us produces 2 drafts a week for 2 different customers. In many cases, we like to go from idea->shipped as early as possible. We like 'working in public', so we would prefer to make incomplete work public and get feedback on it then to spend weeks polishing it internally only to realise that no one really cares. How does authorship, copyright, and bylines work? We think that writing is a team activity, with the author as a central role. We strive to treat authors more like they might be used to from working with book publishers (many other roles support the author) rather than following the process used by content mills (where the author is pulled in different directions by different managers). That said, most of our writing is for third-party customers who are doing this for their own brands, and therefore in most cases the author's name (nor the Ritza branding) will not appear on the final version. Authors are always welcome to include links to articles they have worked on in personal portfolio sites and similar. Ebooks and larger projects are published under the Ritza brand, potentially with a list of contributors.","title":"Writing for Ritza"},{"location":"how-we-work/writing-for-ritza/#writing-for-ritza","text":"If you're part of the small group of people who likes writing and coding, we might be a good fit. Ritza produces very technical articles, blog posts, documentation, and ebooks, usually including code samples. In many cases, our writers build proof-of-concept projects and write about how they did it, so they are proficient at programming (often generalists so that they can e.g. build a small web application, including the front-end, back-end, and database) and love writing (while we have expert editors on board, our writers are also good at things like sentence structure, grammar, and explaining complicated concepts using simple language). We produce articles across a wide range of subject areas, but some focus areas include: Software Engineering - e.g. building web applications, games, tools, etc DevOps - e.g. deploying applications to production environments or using specific platforms Machine Learning and MLOps - e.g. training basic models or setting up production ML architectures Some examples of our work include: Code With Repl.it : A set of tutorials and ebook for learning to code while using Repl.it Code Capsules : an example of a project we did for a PaaS provider.","title":"Writing for Ritza"},{"location":"how-we-work/writing-for-ritza/#what-you-need-to-be-considered","text":"We work with writers from different backrounds and we do not look for formal qualifications (though in many cases an understanding of computer science fundamentals typically associated with a university degree is important). Many of our writers need Experience with coding, preferably in a production setting Experience with writing, preferably educational style non-fiction writing (e.g. a technical blog) But these are not hard requirements, so if you have a strong interest in both we can show you the ropes.","title":"What you need to be considered"},{"location":"how-we-work/writing-for-ritza/#how-we-work-with-writers","text":"We are not a freelance marketplace, so nearly all of our writers work with us regularly, not on one-off projects. We think that writing 40h/week is a sure way to get burned out and we value the industry experience that our writers have too. A majority of our writers work with us on retainer agreements for a fixed number of hours per week. This is not in addition to a full time job - we don't believe that anyone should work for more than 40h/week, so most of our writers are part time or freelance engineers, or they have other priorities in life like spending more time with their families and therefore a part time arrangement works out well for them. Our preferred method of hiring is We look at your application (possibly including CV, writing samples, code portfolio, motivation letter though none are compulsory) If we like it, we arrange a short, informal call to get to know you a bit better If we like each other after that, we contract you to do a trial article (around 2000 words) If we like each other after that, we agree to a monthly retainer (you work 10-30 hours/month for us for a fixed monthly fee)","title":"How we work with writers"},{"location":"how-we-work/writing-for-ritza/#how-our-writing-process-works","text":"Our writers often propose article topics themselves. Sometimes we have specific topics to meet the needs of our customers, or we brainstorm interesting topics as a team. Once a topic is finalised, the writer starts a draft. This often involves writing some example code, and then writing an article including that code. The article goes through some rounds of editing, usually a technical feedback round where higher level feedback is given and then a language feedback round focusing on clarity and match with our style guide . Once an article is ready, we push it to relevant places - usually our customer's own website and possibly also channels like Medium, HashNode, and Dev.to. We focus on quality over speed (we try to avoid 'rush work' or very short deadlines), but at the same time we work with a high velocity . Articles do not sit around between rounds of editing waiting for feedback from different people. The technical and language editing rounds should take no more than 2 days in most cases.","title":"How our writing process works"},{"location":"how-we-work/writing-for-ritza/#frequency-and-quantity-of-posts","text":"This depends a lot on complexity - a 2000 word post can take 2 days or 2 weeks, depending on things like research needed and technical complexity. We always mutually agree deadlines with our writers: usually they propose one that seems manageable to them first, instead of the assigning them arbitrarily. The number of posts a writer can do also depends on their hourly agreement with us. Some examples: A writer on a 15h/week contract with us produces, on average, a proof-of-concept application and draft of 2000 words per week (perhaps 5-7 hours on each the code and writing, with some time for collaboration, editing, updating existing content, etc) A writer on a 4h/week contract with us produces one very in-depth article (5000+ words with extensive code samples) after 4 weeks. A writer on a 30h/week contract with us produces 2 drafts a week for 2 different customers. In many cases, we like to go from idea->shipped as early as possible. We like 'working in public', so we would prefer to make incomplete work public and get feedback on it then to spend weeks polishing it internally only to realise that no one really cares.","title":"Frequency and quantity of posts"},{"location":"how-we-work/writing-for-ritza/#how-does-authorship-copyright-and-bylines-work","text":"We think that writing is a team activity, with the author as a central role. We strive to treat authors more like they might be used to from working with book publishers (many other roles support the author) rather than following the process used by content mills (where the author is pulled in different directions by different managers). That said, most of our writing is for third-party customers who are doing this for their own brands, and therefore in most cases the author's name (nor the Ritza branding) will not appear on the final version. Authors are always welcome to include links to articles they have worked on in personal portfolio sites and similar. Ebooks and larger projects are published under the Ritza brand, potentially with a list of contributors.","title":"How does authorship, copyright, and bylines work?"},{"location":"improving-your-writing/how-do-I-become-a-better-writer/","text":"How do I become a better writer Write. The first millions words are the hardest. Watch The Craft of Writing Effectively by Larry McEnerney Read On Writing Well: The Classic Guide to Writing Nonfiction by William Zinsser Read On Writing: A Memoir of the Craft by Stephen King","title":"How do I become a better writer"},{"location":"improving-your-writing/how-do-I-become-a-better-writer/#how-do-i-become-a-better-writer","text":"Write. The first millions words are the hardest. Watch The Craft of Writing Effectively by Larry McEnerney Read On Writing Well: The Classic Guide to Writing Nonfiction by William Zinsser Read On Writing: A Memoir of the Craft by Stephen King","title":"How do I become a better writer"},{"location":"improving-your-writing/how-do-I-become-a-good-writer/","text":"How do I become a good writer? Many people ask us how to become a writer. Here's an opinionated guide. Year 1: write (yes, there are no shortcuts unfortunately). The best resource is docs.new or other text editor of your choice. Write. Preferably a lot. The first million words are the hardest. The right process for you is a process which gets you to write 250k words this year. It's almost inconceivable to have delta in a process which would make 250k words with Process A less successful than 25k words with Process B, but that level of difference in output is legion. -- Patio11 . Year 1: read Many people try to learn something without doing it - by watching others, reading guides, buying courses. If you want to ignore one section in this document, ignore this one and take note only of the previous one. That said, if you're actively practicing, getting some advice from people who have actively practiced even more can be useful. Understand that everything you know is probably wrong Larry's video Learn by example Zissner I don't have a year? How can I get good in 4 weeks. You can't, but you're going to try anyway so here's a reasonable condensed programme Larry's video Zissner Eats Shoots and Leaves","title":"How do I become a good writer?"},{"location":"improving-your-writing/how-do-I-become-a-good-writer/#how-do-i-become-a-good-writer","text":"Many people ask us how to become a writer. Here's an opinionated guide.","title":"How do I become a good writer?"},{"location":"improving-your-writing/how-do-I-become-a-good-writer/#year-1-write-yes-there-are-no-shortcuts-unfortunately","text":"The best resource is docs.new or other text editor of your choice. Write. Preferably a lot. The first million words are the hardest. The right process for you is a process which gets you to write 250k words this year. It's almost inconceivable to have delta in a process which would make 250k words with Process A less successful than 25k words with Process B, but that level of difference in output is legion. -- Patio11 .","title":"Year 1: write (yes, there are no shortcuts unfortunately)."},{"location":"improving-your-writing/how-do-I-become-a-good-writer/#year-1-read","text":"Many people try to learn something without doing it - by watching others, reading guides, buying courses. If you want to ignore one section in this document, ignore this one and take note only of the previous one. That said, if you're actively practicing, getting some advice from people who have actively practiced even more can be useful.","title":"Year 1: read"},{"location":"improving-your-writing/how-do-I-become-a-good-writer/#understand-that-everything-you-know-is-probably-wrong","text":"Larry's video","title":"Understand that everything you know is probably wrong"},{"location":"improving-your-writing/how-do-I-become-a-good-writer/#learn-by-example","text":"Zissner","title":"Learn by example"},{"location":"improving-your-writing/how-do-I-become-a-good-writer/#i-dont-have-a-year-how-can-i-get-good-in-4-weeks","text":"You can't, but you're going to try anyway so here's a reasonable condensed programme Larry's video Zissner Eats Shoots and Leaves","title":"I don't have a year? How can I get good in 4 weeks."},{"location":"jobs/backend-freelance-writer/","text":"TECHNICAL WRITER - Backend (Python, Java, NodeJS) :city_sunset: Company Name: Ritza (https://ritza.co) :world_map: Location: Global :timer_clock: Duration: 20-40h / week, indefinitely :runner: Starting: ASAP :moneybag: Rate: You tell us :desktop_computer: Work Description: Build fun proof-of-concept apps, share your expertise with the world, and get paid, while improving your writing skills. You\u2019ll code small projects and teach others how you did it. All of our work is made freely available to the world. Work with a team of experienced writers and editors, in a flexible, asynchronous, fully remote environment. You should have at least some professional experience with coding and some experience with writing, even if it\u2019s just a personal blog. Apply by filling out this form . Email editor@ritza.co if you have questions with 'BACKEND FREELANCE WRITER' as a subject. [We are also hiring for several existing and future projects, so feel free to fill out the form if you\u2019re interested in tech writing even if you\u2019re not a perfect fit.]","title":"Backend freelance writer"},{"location":"jobs/backend-freelance-writer/#technical-writer-backend-python-java-nodejs","text":":city_sunset: Company Name: Ritza (https://ritza.co) :world_map: Location: Global :timer_clock: Duration: 20-40h / week, indefinitely :runner: Starting: ASAP :moneybag: Rate: You tell us :desktop_computer: Work Description: Build fun proof-of-concept apps, share your expertise with the world, and get paid, while improving your writing skills. You\u2019ll code small projects and teach others how you did it. All of our work is made freely available to the world. Work with a team of experienced writers and editors, in a flexible, asynchronous, fully remote environment. You should have at least some professional experience with coding and some experience with writing, even if it\u2019s just a personal blog. Apply by filling out this form . Email editor@ritza.co if you have questions with 'BACKEND FREELANCE WRITER' as a subject. [We are also hiring for several existing and future projects, so feel free to fill out the form if you\u2019re interested in tech writing even if you\u2019re not a perfect fit.]","title":"TECHNICAL WRITER - Backend (Python, Java, NodeJS)"},{"location":"jobs/machine-learning-writer/","text":"TECHNICAL WRITER - Machine Learning (TensorFlow, PyTorch, MLFlow, Kubernetes, etc) :city_sunset: Company Name: Ritza (https://ritza.co) :world_map: Location: Global :timer_clock: Duration: 20-40h / week, indefinitely :runner: Starting: ASAP :moneybag: Rate: You tell us :desktop_computer: Work Description: Build fun proof-of-concept apps, share your expertise with the world, and get paid, while improving your writing skills. You\u2019ll code small projects and teach others how you did it. All of our work is made freely available to the world. Work with a team of experienced writers and editors, in a flexible, asynchronous, fully remote environment. You should have at least some professional experience with coding and some experience with writing, even if it\u2019s just a personal blog. Ideally you have experience with production machine learning, from designing experiments through to shipping them at scale. Apply by filling out this form . Email editor@ritza.co if you have questions with 'ML FREELANCE WRITER' as a subject. [We are also hiring for several existing and future projects, so feel free to fill out the form if you\u2019re interested in tech writing even if you\u2019re not a perfect fit.]","title":"Machine learning writer"},{"location":"jobs/machine-learning-writer/#technical-writer-machine-learning-tensorflow-pytorch-mlflow-kubernetes-etc","text":":city_sunset: Company Name: Ritza (https://ritza.co) :world_map: Location: Global :timer_clock: Duration: 20-40h / week, indefinitely :runner: Starting: ASAP :moneybag: Rate: You tell us :desktop_computer: Work Description: Build fun proof-of-concept apps, share your expertise with the world, and get paid, while improving your writing skills. You\u2019ll code small projects and teach others how you did it. All of our work is made freely available to the world. Work with a team of experienced writers and editors, in a flexible, asynchronous, fully remote environment. You should have at least some professional experience with coding and some experience with writing, even if it\u2019s just a personal blog. Ideally you have experience with production machine learning, from designing experiments through to shipping them at scale. Apply by filling out this form . Email editor@ritza.co if you have questions with 'ML FREELANCE WRITER' as a subject. [We are also hiring for several existing and future projects, so feel free to fill out the form if you\u2019re interested in tech writing even if you\u2019re not a perfect fit.]","title":"TECHNICAL WRITER - Machine Learning (TensorFlow, PyTorch, MLFlow, Kubernetes, etc)"},{"location":"project-specific-docs/finalising-a-tutorial/","text":"Finalising Replit tutorials Writers provide tutorials in different formats, both in terms of code and the write up. You need to convert them so that the write up exists as a branch of our fork of their docs and the code exists as a repl on our team account. All screenshots of progress showing the repl should be taken using this version so that the Replit user appears as \"Ritza\". Adding the example Replit embed Add the example Replit embed at the end of the tutorial. In the team plan, the \"share\" button doesn't offer the HTML, but you can grab the latest version of the Embed code by clicking \"Share\" on a personal repl and then switching out the src URL to refer to the example (team) repl. This currently looks as follows but might be updated in the future. < iframe height = \"400px\" width = \"100%\" src = \"https://replit.com/@GarethDwyer1/WelltodoElatedLoops?lite=true\" scrolling = \"no\" frameborder = \"no\" allowtransparency = \"true\" allowfullscreen = \"true\" sandbox = \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" ></ iframe > Adding it to the sidebar Add the tutorial to the appropriate place in sidebar.json as part of the pull request.","title":"Finalising Replit tutorials"},{"location":"project-specific-docs/finalising-a-tutorial/#finalising-replit-tutorials","text":"Writers provide tutorials in different formats, both in terms of code and the write up. You need to convert them so that the write up exists as a branch of our fork of their docs and the code exists as a repl on our team account. All screenshots of progress showing the repl should be taken using this version so that the Replit user appears as \"Ritza\".","title":"Finalising Replit tutorials"},{"location":"project-specific-docs/finalising-a-tutorial/#adding-the-example-replit-embed","text":"Add the example Replit embed at the end of the tutorial. In the team plan, the \"share\" button doesn't offer the HTML, but you can grab the latest version of the Embed code by clicking \"Share\" on a personal repl and then switching out the src URL to refer to the example (team) repl. This currently looks as follows but might be updated in the future. < iframe height = \"400px\" width = \"100%\" src = \"https://replit.com/@GarethDwyer1/WelltodoElatedLoops?lite=true\" scrolling = \"no\" frameborder = \"no\" allowtransparency = \"true\" allowfullscreen = \"true\" sandbox = \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" ></ iframe >","title":"Adding the example Replit embed"},{"location":"project-specific-docs/finalising-a-tutorial/#adding-it-to-the-sidebar","text":"Add the tutorial to the appropriate place in sidebar.json as part of the pull request.","title":"Adding it to the sidebar"},{"location":"project-specific-docs/git-setup/","text":"The main GitHub repository for Replit is at github.com/replit/replit.github.io. We keep a fork of this at github.com/ritza-co/replit.github.io When adding new work, we branch off our fork (usually set this to origin if you're working with git locally). We collaborate on this branch for writing, QA, editing, etc, and then make a request to merge it directly into their repository So the pull request would be something like ritza-co/replit.github.io/add-chatbot-tutorial into replit/replit.github.io/master . We then do a hard reset of our master to upstream to bring that work in to our 'main' branch. We don't merge feature branches directly into our master branch, nor do we use this for anything except as a clean slate to start new feature branches.","title":"Git setup"},{"location":"project-specific-docs/working-from-latest-version/","text":"Working from the latest version of the Replit docs To ensure that you are working from the latest version, you should pull the latest changes down to the master branch of your fork before creating a new one. First push any changes that you've made on your current branch up to the remote. Now change to the master branch And see if you are 'behind'. In this case, there are 19 new commits in master that we don't have so we need to pull those in by pressing the pull button. Now you can create a new branch which will include all the latest chnages If you change to master and it tells you that things are 'up to date' then you can simply make the new branch without pulling first.","title":"Working from the latest version of the Replit docs"},{"location":"project-specific-docs/working-from-latest-version/#working-from-the-latest-version-of-the-replit-docs","text":"To ensure that you are working from the latest version, you should pull the latest changes down to the master branch of your fork before creating a new one. First push any changes that you've made on your current branch up to the remote. Now change to the master branch And see if you are 'behind'. In this case, there are 19 new commits in master that we don't have so we need to pull those in by pressing the pull button. Now you can create a new branch which will include all the latest chnages If you change to master and it tells you that things are 'up to date' then you can simply make the new branch without pulling first.","title":"Working from the latest version of the Replit docs"},{"location":"project-specific-docs/beginnerpythonprojects.com/adding-an-article/","text":"To add a new article, copy the format from a previous one. To get the summary to show up directly beneath the title, add it as an 'Excerpt' under settings","title":"Adding an article"},{"location":"project-specific-docs/codecapsules/","text":"","title":"Index"},{"location":"project-specific-docs/codecapsules/copying-from-github-to-ghost/","text":"Copying from GitHub to Ghost All of our content lives primarily in GitHub. This is important so that we can track changes and keep it up to date. However, some of our customers use Ghost as a CMS, which does not have an easy integration with markdown on GitHub. Therefore, we have to manually copy across content from GitHub to Ghost. Any changes made need to be updated in GitHub and then transferred to Ghost so that GitHub always has the main and most updated copy. Copying procedure The Ghost editor handles formatting quite well. You can preview the markdown file in GitHub (not 'raw' mode), select all the content, and copy it to Ghost. The things that break are Code samples - for each code sample, you need to type three backticks into the Ghost editor and press Enter . This will create a Code block and then you can enter the language in the prompt to get the correct highlighting. See the gif at https://cln.sh/jNSIC2. Links - some links are prefixed with https://github.com... and then the final version is broken.","title":"Copying from GitHub to Ghost"},{"location":"project-specific-docs/codecapsules/copying-from-github-to-ghost/#copying-from-github-to-ghost","text":"All of our content lives primarily in GitHub. This is important so that we can track changes and keep it up to date. However, some of our customers use Ghost as a CMS, which does not have an easy integration with markdown on GitHub. Therefore, we have to manually copy across content from GitHub to Ghost. Any changes made need to be updated in GitHub and then transferred to Ghost so that GitHub always has the main and most updated copy.","title":"Copying from GitHub to Ghost"},{"location":"project-specific-docs/codecapsules/copying-from-github-to-ghost/#copying-procedure","text":"The Ghost editor handles formatting quite well. You can preview the markdown file in GitHub (not 'raw' mode), select all the content, and copy it to Ghost. The things that break are Code samples - for each code sample, you need to type three backticks into the Ghost editor and press Enter . This will create a Code block and then you can enter the language in the prompt to get the correct highlighting. See the gif at https://cln.sh/jNSIC2. Links - some links are prefixed with https://github.com... and then the final version is broken.","title":"Copying procedure"},{"location":"project-specific-docs/codewithrepl.it/","text":"Updating the codewithrepl.it site and book We have https://codewithrepl.it - a site for people looking for coding projects and tutorials https://leanpub.com/coding-with-replit/overview - the tutorials in book form on LeanPub The book chapters are slightly different from the articles - they refer to 'the next chapter' and 'the previous chapter' and gifs are replaced by screenshots where possible and linked to separately. Updating the website here is a commit which shows adding a new article to the site. Cover images are created with Canva. To add a new article, create a similar pull request to https://github.com/ritza-co/code-with-replit-articles (in the 'website' subdirectory). The site is manually deployed, so ping Gareth once you're done so he can push it live. Note that we have been editing the .css and .html files directly instead of following the original NodeJS build process. Updating the book Each article is also copied into https://github.com/ritza-co/code-with-replit-book/. These are almost the same as the online versions, but We add a paragraph at the end of each chapter to introduce the next chapter Gifs are replaced by a single PNG and include a link for the reader to open the .gif if they are reading the book online. If the gif is not that important for following the tutorial, you can simply replace it with a .png and skip adding a link to the full gif Merge the changes into the GitHub repository and then regenerate the book on LeanPub. Download the unbranded epub, mobi and pdfs and upload them to the Digital Ocean space.","title":"Updating the codewithrepl.it site and book"},{"location":"project-specific-docs/codewithrepl.it/#updating-the-codewithreplit-site-and-book","text":"We have https://codewithrepl.it - a site for people looking for coding projects and tutorials https://leanpub.com/coding-with-replit/overview - the tutorials in book form on LeanPub The book chapters are slightly different from the articles - they refer to 'the next chapter' and 'the previous chapter' and gifs are replaced by screenshots where possible and linked to separately.","title":"Updating the codewithrepl.it site and book"},{"location":"project-specific-docs/codewithrepl.it/#updating-the-website","text":"here is a commit which shows adding a new article to the site. Cover images are created with Canva. To add a new article, create a similar pull request to https://github.com/ritza-co/code-with-replit-articles (in the 'website' subdirectory). The site is manually deployed, so ping Gareth once you're done so he can push it live. Note that we have been editing the .css and .html files directly instead of following the original NodeJS build process.","title":"Updating the website"},{"location":"project-specific-docs/codewithrepl.it/#updating-the-book","text":"Each article is also copied into https://github.com/ritza-co/code-with-replit-book/. These are almost the same as the online versions, but We add a paragraph at the end of each chapter to introduce the next chapter Gifs are replaced by a single PNG and include a link for the reader to open the .gif if they are reading the book online. If the gif is not that important for following the tutorial, you can simply replace it with a .png and skip adding a link to the full gif Merge the changes into the GitHub repository and then regenerate the book on LeanPub. Download the unbranded epub, mobi and pdfs and upload them to the Digital Ocean space.","title":"Updating the book"},{"location":"roles/backend-freelance-writer/","text":"TECHNICAL WRITER - Backend (Python, Java, NodeJS) :city_sunset: Company Name: Ritza (https://ritza.co) :world_map: Location: Global :timer_clock: Duration: 20-40h / week, indefinitely :runner: Starting: ASAP :moneybag: Rate: You tell us :desktop_computer: Work Description: Build fun proof-of-concept apps, share your expertise with the world, and get paid, while improving your writing skills. You\u2019ll code small projects and teach others how you did it. All of our work is made freely available to the world. Work with a team of experienced writers and editors, in a flexible, asynchronous, fully remote environment. You should have at least some professional experience with coding and some experience with writing, even if it\u2019s just a personal blog. Apply by filling out this form . Email editor@ritza.co if you have questions with 'BACKEND FREELANCE WRITER' as a subject. [We are also hiring for several existing and future projects, so feel free to fill out the form if you\u2019re interested in tech writing even if you\u2019re not a perfect fit.]","title":"Backend freelance writer"},{"location":"roles/backend-freelance-writer/#technical-writer-backend-python-java-nodejs","text":":city_sunset: Company Name: Ritza (https://ritza.co) :world_map: Location: Global :timer_clock: Duration: 20-40h / week, indefinitely :runner: Starting: ASAP :moneybag: Rate: You tell us :desktop_computer: Work Description: Build fun proof-of-concept apps, share your expertise with the world, and get paid, while improving your writing skills. You\u2019ll code small projects and teach others how you did it. All of our work is made freely available to the world. Work with a team of experienced writers and editors, in a flexible, asynchronous, fully remote environment. You should have at least some professional experience with coding and some experience with writing, even if it\u2019s just a personal blog. Apply by filling out this form . Email editor@ritza.co if you have questions with 'BACKEND FREELANCE WRITER' as a subject. [We are also hiring for several existing and future projects, so feel free to fill out the form if you\u2019re interested in tech writing even if you\u2019re not a perfect fit.]","title":"TECHNICAL WRITER - Backend (Python, Java, NodeJS)"},{"location":"roles/machine-learning-writer/","text":"TECHNICAL WRITER - Machine Learning (TensorFlow, PyTorch, MLFlow, Kubernetes, etc) :city_sunset: Company Name: Ritza (https://ritza.co) :world_map: Location: Global :timer_clock: Duration: 20-40h / week, indefinitely :runner: Starting: ASAP :moneybag: Rate: You tell us :desktop_computer: Work Description: Build fun proof-of-concept apps, share your expertise with the world, and get paid, while improving your writing skills. You\u2019ll code small projects and teach others how you did it. All of our work is made freely available to the world. Work with a team of experienced writers and editors, in a flexible, asynchronous, fully remote environment. You should have at least some professional experience with coding and some experience with writing, even if it\u2019s just a personal blog. Ideally you have experience with production machine learning, from designing experiments through to shipping them at scale. Apply by filling out this form . Email editor@ritza.co if you have questions with 'ML FREELANCE WRITER' as a subject. [We are also hiring for several existing and future projects, so feel free to fill out the form if you\u2019re interested in tech writing even if you\u2019re not a perfect fit.]","title":"Machine learning writer"},{"location":"roles/machine-learning-writer/#technical-writer-machine-learning-tensorflow-pytorch-mlflow-kubernetes-etc","text":":city_sunset: Company Name: Ritza (https://ritza.co) :world_map: Location: Global :timer_clock: Duration: 20-40h / week, indefinitely :runner: Starting: ASAP :moneybag: Rate: You tell us :desktop_computer: Work Description: Build fun proof-of-concept apps, share your expertise with the world, and get paid, while improving your writing skills. You\u2019ll code small projects and teach others how you did it. All of our work is made freely available to the world. Work with a team of experienced writers and editors, in a flexible, asynchronous, fully remote environment. You should have at least some professional experience with coding and some experience with writing, even if it\u2019s just a personal blog. Ideally you have experience with production machine learning, from designing experiments through to shipping them at scale. Apply by filling out this form . Email editor@ritza.co if you have questions with 'ML FREELANCE WRITER' as a subject. [We are also hiring for several existing and future projects, so feel free to fill out the form if you\u2019re interested in tech writing even if you\u2019re not a perfect fit.]","title":"TECHNICAL WRITER - Machine Learning (TensorFlow, PyTorch, MLFlow, Kubernetes, etc)"},{"location":"roles/qa-and-screenshots-role/","text":"The Quality Assurance role and high res screenshots All Ritza tutorials should Be easy to follow - each step should be correct and clear Have high quality graphics - screenshots should be taken on a retina or 4k monitor As each of these steps requires a full \"run through\" the tutorial, they are often done together. The QA engineer should place themselves 'in the reader's shoes' and work through the tutorial from start to end, making sure that each step is clear, unambiguous, and correct. As they go, the QA engineer also re-takes any screenshots that are not high resolution, and adds screenshots for clarity if required. This usually includes adding a screenshot to the introduction section to demonstrate what the app or project will look like once the reader has finished working through the tutorial. We use CleanShotX for all of our screenshots. Ask for a license key if you do not have one. Making changes The QA engineer should submit several pull requests, depending on what is needed. One pull request to include a version of the author's tutorial and code exactly as they provided it . This step can be skipped if the author already made a pull request to the correct place, but often the author works in a different format or on their own GitHub. This should be in a branch called something like add-first-draft-chat-bot-tutorial . This is exactly the author's work. A second pull request for text and/or code changes. If anything isn't clear or the QA engineer finds something confusing, they should submit suggested changes, as a separate pull request (to the version in our GitHub, not to the author's original version. If necessary, they can ask clarifying questions to the author, but in general they should aim to use their judgement so we can keep moving forwards without reverting back to the author. A third pull request to add and update the images. Adding captions and alt text All screenshots should have relevant alt text that can help with accessibility - e.g. blind people have these read to them by screenreaders. In markdown, alt-text can be added within the first set of (square) brackets ![A graph showing that x increases as y decreases](/path/to/image.png) Choosing the correct cropping Showing how much context to show is important. Many people will simply screenshot the entire screen. It is better to crop the screenshot as much as possible, showing only the relevant panel or section of an interface but making sure it is clear what the context is. The user needs to be able to find the section in the screenshot - if it might be difficult, rather include more context for the reader to orientate. Annotations We use numbers, arrows, and rectangles to call the readers attention to specific areas of a screenshot. In some cases, a short amount of text (preferably one word) can be added, but this is generally undesirable. Rather keep any text to captions or paragraphs above/below the image. Gifs Sometimes it's clearer to show something in a gif than in a static image. Gifs should in general be 2-5 seconds long (any longer and the reader is annoyed by having to wait for it to start again if they miss the start).","title":"The Quality Assurance role and high res screenshots"},{"location":"roles/qa-and-screenshots-role/#the-quality-assurance-role-and-high-res-screenshots","text":"All Ritza tutorials should Be easy to follow - each step should be correct and clear Have high quality graphics - screenshots should be taken on a retina or 4k monitor As each of these steps requires a full \"run through\" the tutorial, they are often done together. The QA engineer should place themselves 'in the reader's shoes' and work through the tutorial from start to end, making sure that each step is clear, unambiguous, and correct. As they go, the QA engineer also re-takes any screenshots that are not high resolution, and adds screenshots for clarity if required. This usually includes adding a screenshot to the introduction section to demonstrate what the app or project will look like once the reader has finished working through the tutorial. We use CleanShotX for all of our screenshots. Ask for a license key if you do not have one.","title":"The Quality Assurance role and high res screenshots"},{"location":"roles/qa-and-screenshots-role/#making-changes","text":"The QA engineer should submit several pull requests, depending on what is needed. One pull request to include a version of the author's tutorial and code exactly as they provided it . This step can be skipped if the author already made a pull request to the correct place, but often the author works in a different format or on their own GitHub. This should be in a branch called something like add-first-draft-chat-bot-tutorial . This is exactly the author's work. A second pull request for text and/or code changes. If anything isn't clear or the QA engineer finds something confusing, they should submit suggested changes, as a separate pull request (to the version in our GitHub, not to the author's original version. If necessary, they can ask clarifying questions to the author, but in general they should aim to use their judgement so we can keep moving forwards without reverting back to the author. A third pull request to add and update the images.","title":"Making changes"},{"location":"roles/qa-and-screenshots-role/#adding-captions-and-alt-text","text":"All screenshots should have relevant alt text that can help with accessibility - e.g. blind people have these read to them by screenreaders. In markdown, alt-text can be added within the first set of (square) brackets ![A graph showing that x increases as y decreases](/path/to/image.png)","title":"Adding captions and alt text"},{"location":"roles/qa-and-screenshots-role/#choosing-the-correct-cropping","text":"Showing how much context to show is important. Many people will simply screenshot the entire screen. It is better to crop the screenshot as much as possible, showing only the relevant panel or section of an interface but making sure it is clear what the context is. The user needs to be able to find the section in the screenshot - if it might be difficult, rather include more context for the reader to orientate.","title":"Choosing the correct cropping"},{"location":"roles/qa-and-screenshots-role/#annotations","text":"We use numbers, arrows, and rectangles to call the readers attention to specific areas of a screenshot. In some cases, a short amount of text (preferably one word) can be added, but this is generally undesirable. Rather keep any text to captions or paragraphs above/below the image.","title":"Annotations"},{"location":"roles/qa-and-screenshots-role/#gifs","text":"Sometimes it's clearer to show something in a gif than in a static image. Gifs should in general be 2-5 seconds long (any longer and the reader is annoyed by having to wait for it to start again if they miss the start).","title":"Gifs"},{"location":"roles/qa-to-language-edit/","text":"Once a file has gone though QA , it is ready for language editing. For example, here the QA pull request has been prepared. This is a request to merge the branch containing QA changes into the branch that everyone is collaborating on for this specific article. In this case, the author was working outside of git, so the 'QA' step includes adding the original draft. You can merge the qa-prediction-engine branch into the add-predictive-text-engine branch and then navigate to that branch. The navigate to the place in the structure where the tutorial has been added (tutorials -> 17-predictive-text-engine) https://github.com/ritza-co/replit.github.io/blob/add-predictive-text-engine/tutorials/17-predictive-text-engine.md And you can edit in GitHub there - or create a Replit, clone the whole repository and switch that branch to make edits using Replit if you prefer.","title":"Qa to language edit"},{"location":"style-guide/Style/","text":"\ud83d\udcdd The Ritza style guide We have produced hundreds of technical tutorials, articles, and other educational materials. Our goal is always to teach . This often means helping our readers explain complicated technology, either conceptually or by example. This is our opinionated style guide. Following it will help you produce work that is valuable and easy to understand. Use an appropriate voice and mood Default to first person plural to include the reader in your 'team' When explaining how to do something, use first person plural (we/us). This means you the author, and the reader. You are doing something together. \u2705 \"Next, we'll install the widget factory to create widgets efficiently.\" Sometimes it's more efficient to use the imperative mood and \"instruct\" the reader by telling them what needs to be done. This is harsher but often less wordy, so use your judgement \u26a0\ufe0f \"We can do this by using our package manager. We'll acheive this by typing sudo apt-install widget-factory \" \u2705 \"We can do this by using our package manager. Type sudo apt-install widget-factory \" As a non-fiction writer, we never want to get in the reader's way - they are not interested in us as people \u274c \"I wrote this guide after encountering difficulties with the software myself\" \u274c \"Next, I'm going to show you how to install a widget factory\" It's ok to refer to the reader as 'you' in some cases, where the writer is clearly not involved, but in general, default to the 'we' voice wherever possible. \u26a0\ufe0f \"As you might remember from the previous tutorial , widget factories create widgets. In this tutorial...\" \u2705 \"In the previous tutorial, we saw how widget factories create widgets. In this tutorial...\" Avoid anything you might find in an encyclopaedia or academic paper Most people have been taught to write \"wrong\" at school. You should watch this video if you have time, but in short Don't use anything that you might find at the start of a Wikipedia article or a dictionary. Your reader isn't interested in definitions - or if they are they can easily find these elsewhere. If you're writing an article on NER, instead of starting with \u274c \"Named Entity Recognition (NER) is the task of categorising key words in a text as specific entities.\" Consider something more like \u2705 \"If you're analyzing a large amount of text, it's often useful to extract named entities from this - identifying people, places, dates and other entities.\" If you've ever tried to learn a new concept, you probably already know that reading a definition doesn't really clarify - but a more specific exmaple does. Avoid guessing out loud what the reader wants It's tempting to start an article with \"Are you are a foo who likes to bar but sometimes finds baz?\", but in most cases these define a much narrower audience than the actual audience, and you risk alienating anyone who does not fit that identify (and they might stop reading after the first setence, even if the article would have helped them). Don't give extraneous context Often it's tempting to try and give the reader some related context or information. Generally avoid this. The reader isn't here to learn about knowledge in general, but usually on how to achieve a more specific goal. Instead of \u274c Label Studio is an open source data labeling tool for labeling and exploring multiple types of data. Label Studio can be integrated with machine learning models to supply predictions for labels (pre-labels), or perform continuous active learning. You can use LabelStudio for a variety of labelling and classification tasks for many different data formats but again we will just be focusing on its NER capabilities. Try something more concise: \u2705 We can use Label Studio for manually tagging Named Entities in our dataset. Install it now with pip install label-studio if you haven't already. Default to active voice This is often taken as a hard-and-fast rule. It isn't. In many cases, active voice makes it clearer who is doing what and sounds less stuffy. That said, sometimes passive is simply cleaner (often in cases where there isn't a specific subject) - use your judgement. \u26a0\ufe0f The command will be run by the shell. \u2705 Use the shell to run any commands. Avoid telling the reader that something is obvious or easy Different people find different things difficult. Avoid telling the reader that something should be 'easy', 'obvious' or 'simple'. In the worst case, they find it hard and find it discouraging. In the best case, they do find it easy and they don't gain anything by you telling them that it was easy. Mostly, ~it's simple~ . You can ~easily~ ~just~ remove the offending words and the sentence keeps its meaning. \u274c Obviously, you can terminate the program at any time by hitting Ctrl+C \u2705 You can terminate the program at any time by hitting Ctrl+C Sometimes, you need to reword to avoid implying that something is simple \u274c It's easy to add new widgets using Acme's tool. Click menu -> add widget . \u2705 To add a new widget using Acme's tool, click menu -> add widget . Structures should be as flat as possible Articles should using heading 1 ( # in Markdown) for the title and heading 2 ( ## ) to break things down into logical sections. Heading 3 ( ### ) can be used where necessary for sub-sections, but in general having a deeply nested structure makes things harder to follow, harder to edit, and harder to reuse. As a writer, your job is to take a complicated graph of interconnected ideas and break them down into a linear structure that can be read from start to end. You can do this partially (with many nested substructures), which helps readers but still requires them to put in effort, or you can break things down even more cleanly into a single line (harder for the writer, easier for the reader) Always have content between headings Avoid nested bullets \u274c Don't nest bullets into several levels You have several options for adding widgets From the menu by clicking on file -> add widget by clicking on help searching for add widget and hitting enter With a keyboard shortcut by pressing a and then w in command mode by pressing ctrl + a \u2705 Rather restructure to use separate bullet lists You can add widgets from the menu * by clicking on file -> add widget * by clicking on help searching for add widget and hitting enter or with a keyboard shortcut * by pressing a and then w in command mode * by pressing ctrl + a Avoid 'marketing' speak Never try to sell something to the reader. Don't say a product makes things easy, that a design is beautiful, or use any text that you might find on a SaaS landing page. Link as Much Context as is Useful Choosing what text to link out to an additional resource is more an art than a science. The main rule is that it should be as clear as possible to the reader what is being linked to, but keep it simple. \u274c \" You can follow the widget guide to learn more\" \u274c \"You can follow the widget guide to learn more\" \u2705 \"You can follow the widget guide to learn more\" The first example links too much unnecessary wording. In the second example, the link could be to a Wikipedia article explaining what a guide is. The third makes it clear that it is a link to the guide that was mentioned. Don't Assume Knowledge This can be tricky because, of course, you always have to assume some level of knowledge when writing technical content. However, we try avoid assumptions about our reader's skill level. \u274c \"Referring back to the server code, it's obvious that we need both a success.html and a cancel.html.\" \u2705 \"Referring back to the server code, you may notice it requires both a success.html and a cancel.html.\" Include User-friendly Code Samples We want to tell the reader exactly what code needs to go where , and make it easy to repeat what we are doing. Avoid screenshots of code, and rather present code samples in text, between backtick gates with a language description. Avoid long code snippets Instead of giving an entire file to copy-paste, break down the code into several steps if possible. Provide a file, if you must If there's a lot of \u2018boilerplate\u2019 code, consider providing the file in a repl and instruct the reader to copy the whole thing as a starting point. However, it's preferable to avoid this if you can. Annotate screenshots and use context Screenshots are super helpful tools for tutorials, but using them too often or without clarity may just make it harder for the reader to follow your instructions. \u2705 Use contextual screenshots to help readers navigate whichever platform you are directing them to. \u2705 Use a screenshot to demonstrate what your reader should be seeing if they correctly followed your instructions. \u2705 Make use of [1], [2], [3] annotations if several things need to be shown from a single shot. \u2705 Preferably take screenshots using a 4k/retina screen, or consider using a virtual high-res screen through Chrome dev tools as an alternative. \u2705 For Mac, use CleanShotX if possible \u274c Avoid screenshots of large amounts of text. Rather use a caption if you need to present text to your reader. \u274c Avoid screenshots that show too little; for example, just the button they must click. Where is this button in relation to the page? \u274c At the same time, don't include so much in the screenshot that the reader isn't sure what you are trying to illustrate. Prefer code blocks to inline code It's ok to use markdown's single back-tick syntax to highlight a single word like \"Notice the for statement below\". For any code samples, even if only one line, rather use three backticks and have the code on its own line and in its own section. \u274c Now run python3 app.py \u2705 Now run: ``` python3 app.py ```","title":"\ud83d\udcdd The Ritza style guide"},{"location":"style-guide/Style/#the-ritza-style-guide","text":"We have produced hundreds of technical tutorials, articles, and other educational materials. Our goal is always to teach . This often means helping our readers explain complicated technology, either conceptually or by example. This is our opinionated style guide. Following it will help you produce work that is valuable and easy to understand.","title":"\ud83d\udcdd The Ritza style guide"},{"location":"style-guide/Style/#use-an-appropriate-voice-and-mood","text":"Default to first person plural to include the reader in your 'team' When explaining how to do something, use first person plural (we/us). This means you the author, and the reader. You are doing something together. \u2705 \"Next, we'll install the widget factory to create widgets efficiently.\" Sometimes it's more efficient to use the imperative mood and \"instruct\" the reader by telling them what needs to be done. This is harsher but often less wordy, so use your judgement \u26a0\ufe0f \"We can do this by using our package manager. We'll acheive this by typing sudo apt-install widget-factory \" \u2705 \"We can do this by using our package manager. Type sudo apt-install widget-factory \" As a non-fiction writer, we never want to get in the reader's way - they are not interested in us as people \u274c \"I wrote this guide after encountering difficulties with the software myself\" \u274c \"Next, I'm going to show you how to install a widget factory\" It's ok to refer to the reader as 'you' in some cases, where the writer is clearly not involved, but in general, default to the 'we' voice wherever possible. \u26a0\ufe0f \"As you might remember from the previous tutorial , widget factories create widgets. In this tutorial...\" \u2705 \"In the previous tutorial, we saw how widget factories create widgets. In this tutorial...\"","title":"Use an appropriate voice and mood"},{"location":"style-guide/Style/#avoid-anything-you-might-find-in-an-encyclopaedia-or-academic-paper","text":"Most people have been taught to write \"wrong\" at school. You should watch this video if you have time, but in short Don't use anything that you might find at the start of a Wikipedia article or a dictionary. Your reader isn't interested in definitions - or if they are they can easily find these elsewhere. If you're writing an article on NER, instead of starting with \u274c \"Named Entity Recognition (NER) is the task of categorising key words in a text as specific entities.\" Consider something more like \u2705 \"If you're analyzing a large amount of text, it's often useful to extract named entities from this - identifying people, places, dates and other entities.\" If you've ever tried to learn a new concept, you probably already know that reading a definition doesn't really clarify - but a more specific exmaple does.","title":"Avoid anything you might find in an encyclopaedia or academic paper"},{"location":"style-guide/Style/#avoid-guessing-out-loud-what-the-reader-wants","text":"It's tempting to start an article with \"Are you are a foo who likes to bar but sometimes finds baz?\", but in most cases these define a much narrower audience than the actual audience, and you risk alienating anyone who does not fit that identify (and they might stop reading after the first setence, even if the article would have helped them).","title":"Avoid guessing out loud what the reader wants"},{"location":"style-guide/Style/#dont-give-extraneous-context","text":"Often it's tempting to try and give the reader some related context or information. Generally avoid this. The reader isn't here to learn about knowledge in general, but usually on how to achieve a more specific goal. Instead of \u274c Label Studio is an open source data labeling tool for labeling and exploring multiple types of data. Label Studio can be integrated with machine learning models to supply predictions for labels (pre-labels), or perform continuous active learning. You can use LabelStudio for a variety of labelling and classification tasks for many different data formats but again we will just be focusing on its NER capabilities. Try something more concise: \u2705 We can use Label Studio for manually tagging Named Entities in our dataset. Install it now with pip install label-studio if you haven't already.","title":"Don't give extraneous context"},{"location":"style-guide/Style/#default-to-active-voice","text":"This is often taken as a hard-and-fast rule. It isn't. In many cases, active voice makes it clearer who is doing what and sounds less stuffy. That said, sometimes passive is simply cleaner (often in cases where there isn't a specific subject) - use your judgement. \u26a0\ufe0f The command will be run by the shell. \u2705 Use the shell to run any commands.","title":"Default to active voice"},{"location":"style-guide/Style/#avoid-telling-the-reader-that-something-is-obvious-or-easy","text":"Different people find different things difficult. Avoid telling the reader that something should be 'easy', 'obvious' or 'simple'. In the worst case, they find it hard and find it discouraging. In the best case, they do find it easy and they don't gain anything by you telling them that it was easy. Mostly, ~it's simple~ . You can ~easily~ ~just~ remove the offending words and the sentence keeps its meaning. \u274c Obviously, you can terminate the program at any time by hitting Ctrl+C \u2705 You can terminate the program at any time by hitting Ctrl+C Sometimes, you need to reword to avoid implying that something is simple \u274c It's easy to add new widgets using Acme's tool. Click menu -> add widget . \u2705 To add a new widget using Acme's tool, click menu -> add widget .","title":"Avoid telling the reader that something is obvious or easy"},{"location":"style-guide/Style/#structures-should-be-as-flat-as-possible","text":"Articles should using heading 1 ( # in Markdown) for the title and heading 2 ( ## ) to break things down into logical sections. Heading 3 ( ### ) can be used where necessary for sub-sections, but in general having a deeply nested structure makes things harder to follow, harder to edit, and harder to reuse. As a writer, your job is to take a complicated graph of interconnected ideas and break them down into a linear structure that can be read from start to end. You can do this partially (with many nested substructures), which helps readers but still requires them to put in effort, or you can break things down even more cleanly into a single line (harder for the writer, easier for the reader)","title":"Structures should be as flat as possible"},{"location":"style-guide/Style/#always-have-content-between-headings","text":"","title":"Always have content between headings"},{"location":"style-guide/Style/#avoid-nested-bullets","text":"\u274c Don't nest bullets into several levels You have several options for adding widgets From the menu by clicking on file -> add widget by clicking on help searching for add widget and hitting enter With a keyboard shortcut by pressing a and then w in command mode by pressing ctrl + a \u2705 Rather restructure to use separate bullet lists You can add widgets from the menu * by clicking on file -> add widget * by clicking on help searching for add widget and hitting enter or with a keyboard shortcut * by pressing a and then w in command mode * by pressing ctrl + a","title":"Avoid nested bullets"},{"location":"style-guide/Style/#avoid-marketing-speak","text":"Never try to sell something to the reader. Don't say a product makes things easy, that a design is beautiful, or use any text that you might find on a SaaS landing page.","title":"Avoid 'marketing' speak"},{"location":"style-guide/Style/#link-as-much-context-as-is-useful","text":"Choosing what text to link out to an additional resource is more an art than a science. The main rule is that it should be as clear as possible to the reader what is being linked to, but keep it simple. \u274c \" You can follow the widget guide to learn more\" \u274c \"You can follow the widget guide to learn more\" \u2705 \"You can follow the widget guide to learn more\" The first example links too much unnecessary wording. In the second example, the link could be to a Wikipedia article explaining what a guide is. The third makes it clear that it is a link to the guide that was mentioned.","title":"Link as Much Context as is Useful"},{"location":"style-guide/Style/#dont-assume-knowledge","text":"This can be tricky because, of course, you always have to assume some level of knowledge when writing technical content. However, we try avoid assumptions about our reader's skill level. \u274c \"Referring back to the server code, it's obvious that we need both a success.html and a cancel.html.\" \u2705 \"Referring back to the server code, you may notice it requires both a success.html and a cancel.html.\"","title":"Don't Assume Knowledge"},{"location":"style-guide/Style/#include-user-friendly-code-samples","text":"We want to tell the reader exactly what code needs to go where , and make it easy to repeat what we are doing. Avoid screenshots of code, and rather present code samples in text, between backtick gates with a language description. Avoid long code snippets Instead of giving an entire file to copy-paste, break down the code into several steps if possible. Provide a file, if you must If there's a lot of \u2018boilerplate\u2019 code, consider providing the file in a repl and instruct the reader to copy the whole thing as a starting point. However, it's preferable to avoid this if you can.","title":"Include User-friendly Code Samples"},{"location":"style-guide/Style/#annotate-screenshots-and-use-context","text":"Screenshots are super helpful tools for tutorials, but using them too often or without clarity may just make it harder for the reader to follow your instructions. \u2705 Use contextual screenshots to help readers navigate whichever platform you are directing them to. \u2705 Use a screenshot to demonstrate what your reader should be seeing if they correctly followed your instructions. \u2705 Make use of [1], [2], [3] annotations if several things need to be shown from a single shot. \u2705 Preferably take screenshots using a 4k/retina screen, or consider using a virtual high-res screen through Chrome dev tools as an alternative. \u2705 For Mac, use CleanShotX if possible \u274c Avoid screenshots of large amounts of text. Rather use a caption if you need to present text to your reader. \u274c Avoid screenshots that show too little; for example, just the button they must click. Where is this button in relation to the page? \u274c At the same time, don't include so much in the screenshot that the reader isn't sure what you are trying to illustrate.","title":"Annotate screenshots and use context"},{"location":"style-guide/Style/#prefer-code-blocks-to-inline-code","text":"It's ok to use markdown's single back-tick syntax to highlight a single word like \"Notice the for statement below\". For any code samples, even if only one line, rather use three backticks and have the code on its own line and in its own section. \u274c Now run python3 app.py \u2705 Now run: ``` python3 app.py ```","title":"Prefer code blocks to inline code"},{"location":"style-guide/brandnames/","text":"Brandnames Code Capsules (not codecapsules, CodeCapsules, code capsules) DigitalOcean (not Digital Ocean) GitHub (not Github, Git Hub, github, git hub) Hashnode (not HashNode, Hash node, hashnode, hash node) JavaScript (not Javascript, Java Script, java script, javascript) Label Studio (not labelstudio, LabelStudio, LabelStud.io, label studio) LaTeX (not Latex, latex, LATEX) macOS (not macos, MacOS, Mac OS - previously OS X) NixOS, Nix, Nix language (not nix) Node.js (not NodeJS, node, Nodejs, Node.JS) pandas (not Pandas), unless at the start of a sentence OAuth 2.0 (not oAuth2.0) Replit (not repl.it, Repl.it, replit) Sourcegraph (not Source Graph, SourceGraph) spaCy (not SpaCy, Spacy, spacy) TensorFlow (not tensorflow, Tensorflow, Tensor Flow, tensor flow) Webflow (not Web Flow, WebFlow, webflow, web flow) WebSockets (not websockets, web sockets, Websockets, Web Sockets)","title":"Brandnames"},{"location":"style-guide/brandnames/#brandnames","text":"Code Capsules (not codecapsules, CodeCapsules, code capsules) DigitalOcean (not Digital Ocean) GitHub (not Github, Git Hub, github, git hub) Hashnode (not HashNode, Hash node, hashnode, hash node) JavaScript (not Javascript, Java Script, java script, javascript) Label Studio (not labelstudio, LabelStudio, LabelStud.io, label studio) LaTeX (not Latex, latex, LATEX) macOS (not macos, MacOS, Mac OS - previously OS X) NixOS, Nix, Nix language (not nix) Node.js (not NodeJS, node, Nodejs, Node.JS) pandas (not Pandas), unless at the start of a sentence OAuth 2.0 (not oAuth2.0) Replit (not repl.it, Repl.it, replit) Sourcegraph (not Source Graph, SourceGraph) spaCy (not SpaCy, Spacy, spacy) TensorFlow (not tensorflow, Tensorflow, Tensor Flow, tensor flow) Webflow (not Web Flow, WebFlow, webflow, web flow) WebSockets (not websockets, web sockets, Websockets, Web Sockets)","title":"Brandnames"},{"location":"style-guide/common-writing-mistakes/","text":"Common mistakes tutorial writers make #1 They start with their own personal background. Sorry if it hurts your ego, but no one is looking for your tutorials to learn more about you. I'm a blah from blah and I do blah. I was doing blah because I needed blah and then blah happened and I got stuck. After blahing around for a while, I figured out blah and I thought I'd write down these steps in case they help anyone else\" Just skip it. People aren't here for your background any more than they are when googling for recipes. Overall, keep yourself out of the tutorial as much as possible - the reader should be the main character with you in the background helping out when required. #2 They include too much context In order to understand how to use this Python library, you should first understand what Python is. To understand Python, let me just teach you all of programming quick, but to understand that you need to know what a CPU is... Assume your reader had the same knowledge that you had before you learned the specific thing that the tutorial is about. Don't teach them the basics - they can go through a syllabus for that. #3 They include too little context And then just run the foobar command and everything will magically happen in the background. \"Wait what isn't that the opposite of the previous point?\" Yep, and it's the hardest part of tutorial writing. Predicting at which point your reader will get bored (and reigning in the context) and where they will stumble and fall (and providing just a little bit more). As a rule of thumb, never provide context that is two steps removed (context for the context for the subject matter), but it' a grey area and very hard to define. Practice makes perfect. #4 The tutorial is too short It's hard to say something meaningful in less than around 1500-2000 words. If you 'run out' of things to say at < 1000 words, it's likely that you need to either a) make the project a bit more complicated or b) explain some of the steps in more detail.","title":"Common mistakes tutorial writers make"},{"location":"style-guide/common-writing-mistakes/#common-mistakes-tutorial-writers-make","text":"","title":"Common mistakes tutorial writers make"},{"location":"style-guide/common-writing-mistakes/#1-they-start-with-their-own-personal-background","text":"Sorry if it hurts your ego, but no one is looking for your tutorials to learn more about you. I'm a blah from blah and I do blah. I was doing blah because I needed blah and then blah happened and I got stuck. After blahing around for a while, I figured out blah and I thought I'd write down these steps in case they help anyone else\" Just skip it. People aren't here for your background any more than they are when googling for recipes. Overall, keep yourself out of the tutorial as much as possible - the reader should be the main character with you in the background helping out when required.","title":"#1 They start with their own personal background."},{"location":"style-guide/common-writing-mistakes/#2-they-include-too-much-context","text":"In order to understand how to use this Python library, you should first understand what Python is. To understand Python, let me just teach you all of programming quick, but to understand that you need to know what a CPU is... Assume your reader had the same knowledge that you had before you learned the specific thing that the tutorial is about. Don't teach them the basics - they can go through a syllabus for that.","title":"#2 They include too much context"},{"location":"style-guide/common-writing-mistakes/#3-they-include-too-little-context","text":"And then just run the foobar command and everything will magically happen in the background. \"Wait what isn't that the opposite of the previous point?\" Yep, and it's the hardest part of tutorial writing. Predicting at which point your reader will get bored (and reigning in the context) and where they will stumble and fall (and providing just a little bit more). As a rule of thumb, never provide context that is two steps removed (context for the context for the subject matter), but it' a grey area and very hard to define. Practice makes perfect.","title":"#3 They include too little context"},{"location":"style-guide/common-writing-mistakes/#4-the-tutorial-is-too-short","text":"It's hard to say something meaningful in less than around 1500-2000 words. If you 'run out' of things to say at < 1000 words, it's likely that you need to either a) make the project a bit more complicated or b) explain some of the steps in more detail.","title":"#4 The tutorial is too short"},{"location":"style-guide/grammar/","text":"Grammar TODO","title":"Grammar"},{"location":"style-guide/grammar/#grammar","text":"TODO","title":"Grammar"}]}